---
- name: "Verifiy if Profile already exists"
  ansible.builtin.stat:
    path: "{{ was_base_path }}/profiles/{{ profile_name }}"
  register: profile_already_exists

- name: Verify if pid file
  ansible.builtin.shell: ps -p `cat "{{ was_base_path }}/profiles/{{ profile_name }}/logs/dmgr/dmgr.pid"`
  register: "dmgr_is_running"
  ignore_errors: true
  changed_when: dmgr_is_running.rc != 0

- name: "Check if stat exists {{ bin_directory }}"
  ansible.builtin.stat:
    path: "{{ bin_directory }}"
  register: bin_dir

- name: "Generate Response file"
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ bin_directory }}/{{ item | replace('.j2', '.py') }}"
    owner: "{{ was_owner }}"
    group: "{{ was_group }}"
    mode: '0755'
  when: bin_dir.stat.exists
  with_items: "{{ log_files }}"

- name: "Get the applications sservers list"
  ansible.builtin.command: >
    sh wsadmin.sh -lang jython -username {{ was_username }} -password {{ was_password }} -f {{ bin_directory }}/application_server_list.py
  register: app_server_list
  args:
    chdir: "{{ bin_directory }}"
  changed_when: app_server_list.rc == 0

- name: Print the result of Get the applications sservers list"
  ansible.builtin.debug:
    msg: "{{ app_server_list.stdout_lines[1:] }}"

- name: "Purge Response file"
  ansible.builtin.file:
    path: "{{ bin_directory }}/{{ item | replace('.j2', '.py') }}"
    state: absent
  with_items: "{{ log_files }}"
#########################################

- name: Verify the WAS applications JVMs Running or not
  ignore_errors: true
  ansible.builtin.shell: |
    ps -p $(cat "{{ was_server_stop__was_install_location }}"/profiles/"{{ was_server_stop__node_profile_name }}"/logs/"{{ item }}"/"{{ item }}".pid) > /dev/null
  register: server_is_running
  with_items: "{{ app_server_list.stdout_lines[1:] }}"
  changed_when: server_is_running.rc == 0
  failed_when: false

- name: Print the msg
  ansible.builtin.debug:
    msg: "{{ item.item }} is not running"
  when: item.rc != 0
  with_items: "{{ server_is_running.results }}"

- name: Print the msg
  ansible.builtin.debug:
    msg: "{{ item.item }} is running"
  when: item.rc == 0
  with_items: "{{ server_is_running.results }}"

- name: "Stop Servers if it's running"
  ansible.builtin.command: "{{ was_server_stop__was_install_location }}/profiles/{{ was_server_stop__node_profile_name }}/bin/stopServer.sh {{ item }} -username {{ was_username }} -password {{ was_password }}"
  register: server_stop
  changed_when: server_stop.rc == 0
  with_items: "{{ app_server_list.stdout_lines[1:] }}"
  ignore_errors: true
  failed_when: false

- name: Print the msg
  ansible.builtin.debug:
    msg: "WAS applications JVMs stopped successfully"
  ignore_errors: true
  failed_when: false
