---
- name: "Verifiy if Profile already exists"
  ansible.builtin.stat:
    path: "{{ was_base_path }}/profiles/{{ profile_name }}"
  register: profile_already_exists

- name: Verify if pid file
  ansible.builtin.shell: ps -p `cat "{{ was_base_path }}/profiles/{{ profile_name }}/logs/dmgr/dmgr.pid"`
  register: "dmgr_is_running"
  ignore_errors: true
  changed_when: dmgr_is_running.rc != 0

- name: "Check if stat exists {{ bin_directory }}"
  ansible.builtin.stat:
    path: "{{ bin_directory }}"
  register: bin_dir

- name: "Generate Response file"
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ bin_directory }}/{{ item | replace('.j2', '.py') }}"
    owner: "{{ was_owner }}"
    group: "{{ was_group }}"
    mode: '0755'
  when: bin_dir.stat.exists
  with_items: "{{ log_files }}"

- name: "Assigning roles to Group"
  ansible.builtin.command: >
    sh wsadmin.sh -lang jython -username {{ was_username }} -password {{ was_password }} -f {{ bin_directory }}/was_group_role_assigning.py {{ command_line_arg_for_role_assign_group }}
  register: group_role_reg
  args:
    chdir: "{{ bin_directory }}"
  changed_when: group_role_reg.rc == 0

- name: Print the result of Assigning roles to Group
  ansible.builtin.debug:
    msg: "{{ group_role_reg.stdout }}"
  changed_when: "'Configuration saved successfully.' in group_role_reg.stdout"

- name: "Purge Response file"
  ansible.builtin.file:
    path: "{{ bin_directory }}/{{ item | replace('.j2', '.py') }}"
    state: absent
  with_items: "{{ log_files }}"
