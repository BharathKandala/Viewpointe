---
- name: "Verifiy if Profile already exists"
  ansible.builtin.stat:
    path: "{{ was_base_path }}/profiles/{{ profile_name }}"
  register: profile_already_exists

- name: Verify if pid file
  ansible.builtin.shell: ps -p `cat "{{ was_base_path }}/profiles/{{ profile_name }}/logs/dmgr/dmgr.pid"`
  register: "dmgr_is_running"
  ignore_errors: true
  changed_when: dmgr_is_running.rc != 0

- name: "Check if stat exists {{ bin_directory }}"
  ansible.builtin.stat:
    path: "{{ bin_directory }}"
  register: bin_dir

- name: "Generate Response file"
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ bin_directory }}/{{ item | replace('.j2', '.py') }}"
    owner: "{{ was_owner }}"
    group: "{{ was_group }}"
    mode: '0755'
  when: bin_dir.stat.exists
  with_items: "{{ log_files }}"

- name: Include Audit monitor creation
  ansible.builtin.include_tasks: create_audit_monitor.yml

- name: Include security Audit creation
  ansible.builtin.include_tasks: create_security_auditing.yml

- name: Include Audit filter type creation
  ansible.builtin.include_tasks: create_audit_filter_type.yml

- name: Include Audit service provider configuration
  ansible.builtin.include_tasks: config_service_provider.yml

- name: Include Encrypt Audit logs configuration
  ansible.builtin.include_tasks: encrypt_audit_logs.yml

- name: Include Audit record sigining configuration
  ansible.builtin.include_tasks: config_audit_record_singing.yml

- name: "Purge Response file"
  ansible.builtin.file:
    path: "{{ bin_directory }}/{{ item | replace('.j2', '.py') }}"
    state: absent
  with_items: "{{ log_files }}"
  
- name: Setfact for Logs
  ansible.builtin.set_fact:
    audit_logging_reg: 'Completed'
  no_log: true
  
- name: Log other_role_or_task result
  ansible.builtin.lineinfile:
    path: "{{ log_status_file_dir }}"
    line: "Audit logging Status: Completed"
  when: "audit_logging_reg == 'Completed'"
