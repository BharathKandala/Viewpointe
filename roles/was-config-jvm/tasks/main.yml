---
# - name: Setting host for profile_name
  # ansible.builtin.set_fact:
    # profile_name: "{{ ansible_hostname }}"

# - name: Print the Profilename
  # ansible.builtin.debug:
    # msg: "{{ value }}"

- name: "Verifiy if Profile already exists"
  ansible.builtin.stat:
    path: "{{ was_base_path }}/profiles/{{ dmgr_profile_name }}"
  register: profile_already_exists

- name: Verify if pid file
  ansible.builtin.shell: ps -p `cat "{{ was_base_path }}/profiles/{{ dmgr_profile_name }}/logs/dmgr/dmgr.pid"`
  register: "dmgr_is_running"
  ignore_errors: true
  changed_when: dmgr_is_running.rc != 0

- name: "Check if stat exists {{ bin_directory }}"
  ansible.builtin.stat:
    path: "{{ bin_directory }}"
  register: bin_dir

- name: "Generate Response file"
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ bin_directory }}/{{ item | replace('.j2', '.py') }}"
    owner: "{{ was_owner }}"
    group: "{{ was_group }}"
    mode: '0755'
  when: bin_dir.stat.exists
  with_items: "{{ log_files }}"

- name: Inlcude tasks for Logs DMGR
  ansible.builtin.include_tasks: config_logs_dmgr.yml
  when: config == 'dmgr' or config == 'all'

- name: Inlcude tasks for Logs NodeAgent
  ansible.builtin.include_tasks: config_logs_nodeagent.yml
  when: config == 'nodeagent' or config == 'all'

- name: Inlcude tasks for Logs Application Server
  ansible.builtin.include_tasks: config_logs_appserver.yml
  when: config == 'appserver' or config == 'all'

- name: "Purge Response file"
  ansible.builtin.file:
    path: "{{ bin_directory }}/{{ item | replace('.j2', '.py') }}"
    state: absent
  with_items: "{{ log_files }}"

- name: Setfact for Logs
  ansible.builtin.set_fact:
    jvm_config: 'Completed'
  no_log: true

- name: Log other_role_or_task result
  ansible.builtin.lineinfile:
    path: "{{ log_status_file_dir }}"
    line: "JVM config Status: 'Completed'"
  when: "jvm_config == 'Completed'"
